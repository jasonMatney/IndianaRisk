splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.7, 0.25), seed=1236)
names(splits) <- c("train","valid","test")
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.7, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
dim(test)
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.7, 0.13), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.65, 0.10), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.65, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.7, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.72, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.71, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
dim(test)
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.715, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.72, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.75, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.7, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.705, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.71, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.707, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
dim(train)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.707, 0.10), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(train)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.72, 0.10), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(train)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.8, 0.10), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(train)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.75, 0.10), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(train)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.73, 0.10), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(train)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.10), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(train)
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.09), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.07), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.12), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.15), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.10), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.11), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.12), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.115), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
## Splits datasets into train, valid and test
splits <- h2o.splitFrame(data=IN_22c, ratios=c(0.74, 0.117), seed=1236)
names(splits) <- c("train","valid","test")
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
dim(test)
dim(train)
din(valid)
dim(valid)
# Define response and predictors #
response <- "claims_total_building_insurance_coverage_avg"
predictors <- names(IN_22_scale[,which(!names(IN_22_scale) %in% c("subwatershed", "claims_total_building_insurance_coverage_avg"))])
gc()
## run our first predictive model
rf_IN_22c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf_IN_22c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=10,
##   not required, but helps use Flow
ntrees = 60,                  ## use a maximum of 200 trees
max_depth = 10,
stopping_metric = "RMSE",
keep_cross_validation_predictions = T,
stopping_tolerance = 0.1,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
###############################################################################
summary(rf_IN_22c)
# Variable Importance
h2o.varimp_plot(rf_IN_22c)
rf_performance <- h2o.performance(rf_IN_22c, test)
rf_performance
## run our second predictive model
glm_IN_22c <- h2o.glm(family= "gaussian",
x= predictors,
y=response,
training_frame = train,
validation_frame = valid,
seed = 111,
lambda = 0,
early_stopping = TRUE)
h2o.coef(glm_IN_22c)
# Variable Importance
h2o.varimp_plot(glm_IN_22c)
glm_performance <- h2o.performance(glm_IN_22c, test)
glm_performance
###########
## DALEX ##
###########
library(DALEX)
x_valid <- as.data.frame(splits$valid)[, predictors]
y_valid <- as.vector(as.numeric(as.character(splits$valid$claims_total_building_insurance_coverage_avg)))
head(y_valid)
h2o.predict(rf_IN_22c, as.h2o(x_valid))
# gradient boosting machine model
gbm_IN_22c <-  h2o.gbm(
x = predictors,
y = response,
training_frame = train,
validation_frame = valid,
seed = 123,
stopping_metric = "MAE",
#  keep_cross_validation_predictions = T,
stopping_tolerance = 1e-2,     ##
score_each_iteration = T,
)
# Variable Importance
h2o.varimp_plot(gbm_IN_22c)
h2o.performance(gbm_IN_22c, test)
#########################
### DALEX explainers ####
#########################
# create custom predict function
pred <- function(model, newdata)  {
results <- as.data.frame(h2o.predict(model, as.h2o(newdata)))
return(results$predict)
}
pred(rf_IN_22c, x_valid) %>% head()
# elastic net explainer
explainer_glm <- explain(
model = glm_IN_22c,
data = x_valid,
y = y_valid,
predict_function = pred,
label = "h2o glm"
)
# random forest explainer
explainer_rf <- explain(
model = rf_IN_22c,
data = x_valid,
y = y_valid,
predict_function = pred,
label = "h2o rf"
)
# GBM explainer
explainer_gbm <- explain(
model = gbm_IN_22c,
data = train[,predictors],
y = as.vector(train[,response]),
predict_function = pred,
label = "h2o gbm"
)
# example of explainer object
class(explainer_glm)
## [1] "explainer"
summary(explainer_glm)
# compute predictions & residuals
resids_glm <- DALEX::model_performance(explainer_glm)
resids_rf  <- model_performance(explainer_rf)
resids_gbm <- model_performance(explainer_gbm)
# create comparison plot of residuals for each model
p1 <- plot(resids_glm, resids_rf, resids_gbm)
p2 <- plot(resids_glm, resids_rf, resids_gbm, geom = "boxplot")
gridExtra::grid.arrange(p1, p2, nrow = 1)
# gradient boosting machine model
gbm_IN_22c <-  h2o.gbm(
x = predictors,
y = response,
training_frame = train,
validation_frame = valid,
seed = 123,
stopping_metric = "MAE",
#  keep_cross_validation_predictions = T,
stopping_tolerance = 1e-2,     ##
score_each_iteration = T,
)
# Variable Importance
h2o.varimp_plot(gbm_IN_22c)
h2o.performance(gbm_IN_22c, test)
# gradient boosting machine model
gbm_IN_22c <-  h2o.gbm(
x = predictors,
y = response,
training_frame = train,
validation_frame = valid,
seed = 123,
stopping_metric = "RMSE",
#  keep_cross_validation_predictions = T,
stopping_tolerance = 1e-2,     ##
score_each_iteration = T,
)
# Variable Importance
h2o.varimp_plot(gbm_IN_22c)
h2o.performance(gbm_IN_22c, test)
## run our first predictive model
rf_IN_22c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf_IN_22c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=10,
##   not required, but helps use Flow
ntrees = 60,                  ## use a maximum of 200 trees
max_depth = 10,
stopping_metric = "RMSE",
stopping_rounds = 1,
keep_cross_validation_predictions = T,
stopping_tolerance = 0.1,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
###############################################################################
summary(rf_IN_22c)
# Variable Importance
h2o.varimp_plot(rf_IN_22c)
rf_performance <- h2o.performance(rf_IN_22c, test)
rf_performance
## run our first predictive model
rf_IN_22c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf_IN_22c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=100,
##   not required, but helps use Flow
ntrees = 60,                  ## use a maximum of 200 trees
max_depth = 10,
stopping_metric = "RMSE",
stopping_rounds = 5,
keep_cross_validation_predictions = T,
stopping_tolerance = 0.1,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
## run our first predictive model
rf_IN_22c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf_IN_22c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=10,
##   not required, but helps use Flow
ntrees = 200,                  ## use a maximum of 200 trees
max_depth = 10,
stopping_metric = "RMSE",
stopping_rounds = 5,
keep_cross_validation_predictions = T,
stopping_tolerance = 0.1,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
###############################################################################
summary(rf_IN_22c)
# Variable Importance
h2o.varimp_plot(rf_IN_22c)
rf_performance <- h2o.performance(rf_IN_22c, test)
rf_performance
## run our first predictive model
rf_IN_22c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf_IN_22c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=10,
##   not required, but helps use Flow
ntrees = 200,                  ## use a maximum of 200 trees
max_depth = 10,
stopping_metric = "deviance",
stopping_rounds = 5,
keep_cross_validation_predictions = T,
stopping_tolerance = 0.1,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
###############################################################################
summary(rf_IN_22c)
# Variable Importance
h2o.varimp_plot(rf_IN_22c)
rf_performance <- h2o.performance(rf_IN_22c, test)
rf_performance
test
## run our first predictive model
rf_IN_22c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf_IN_22c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=10,
##   not required, but helps use Flow
ntrees = 200,                  ## use a maximum of 200 trees
max_depth = 10,
stopping_metric = "deviance",
stopping_rounds = 5,
keep_cross_validation_predictions = T,
stopping_tolerance = 0,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
###############################################################################
summary(rf_IN_22c)
# Variable Importance
h2o.varimp_plot(rf_IN_22c)
rf_performance <- h2o.performance(rf_IN_22c, test)
rf_performance
### VIF ######
library(tidyverse)
library(caret)
names(IN_22_scale)
mod <- lm(claims_total_building_insurance_coverage_av ~., data=IN_22_scale)
mod <- lm(claims_total_building_insurance_coverage_avg ~., data=IN_22_scale)
vif(mod)
car::vif(mod)
a <- car::vif(mod)
round(a,2)
sort(round(a,2))
IN_df <- IN_22_scale[ , -which(names(IN_22_scale) %in% c("orb25yr24ha_am", "orb2yr24ha_am", "orb50yr24ha_am"))]
head(IN_df)
mod <- lm(claims_total_building_insurance_coverage_avg ~., data=IN_df)
a <- car::vif(mod)
sort(round(a,2))
